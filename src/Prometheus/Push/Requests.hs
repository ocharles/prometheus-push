{-# language NamedFieldPuns #-}

module Prometheus.Push.Requests where

import Control.Exception
import Control.Monad
import Control.Monad.IO.Class
import qualified Data.ByteString.Char8 as C8
import qualified Data.ByteString.Lazy as LBS
import Data.Monoid
import qualified Data.Text.Encoding as T
import Network.HTTP.Client
import Network.HTTP.Types.Method
import Network.HTTP.Types.Status
import Prometheus

import Prometheus.Push.Job (Job(..))
import Prometheus.Push.PushGateway (PushGateway(..))
import Prometheus.Push.PushGatewayException


-- | Create a @PUT@ 'Request' to push the global repository metrics of this
-- process under the name of a specific 'Job' to a particular 'PushGateway'.
-- This overwrites all metrics with the same job.

putMetricsRequest :: PushGateway -> Job -> Request
putMetricsRequest PushGateway{ pushGatewayHost, pushGatewayPort } Job{ jobName } =
  defaultRequest
    { host = pushGatewayHost
    , path = C8.pack "/metrics/job/" <> T.encodeUtf8 jobName
    , method = methodPut
    , port = pushGatewayPort
    , requestBody = RequestBodyIO (RequestBodyBS <$> exportMetricsAsText)
    }



-- | Try and send a 'putMetricsRequest' to a push gateway using a given 'Manager'.
--
-- This uses the basic "http-client" 'Manager' and the request generated by 'putMetricsRequest'.
-- If you need anything more complicated, use 'sendPushGatewayRequest'.
--
-- Throws:
-- * 'PushGatewayException' if the push gateway respons with a @4xx@ or @5xx@ status code.

putMetrics :: (MonadIO m) => Manager -> PushGateway -> Job -> m ()
putMetrics manager gateway job =
  sendPushGatewayRequest (liftIO . flip httpLbs manager) (putMetricsRequest gateway job)



-- | Create a @POST@ 'Request' to push the global repository metrics of this
-- process under the name of a specific 'Job' to a particular 'PushGateway'.
-- This replaces metrics with the same name and job.

postMetricsRequest :: PushGateway -> Job -> Request
postMetricsRequest PushGateway{ pushGatewayHost, pushGatewayPort } Job{ jobName } =
  defaultRequest
    { host = pushGatewayHost
    , path = C8.pack "/metrics/job/" <> T.encodeUtf8 jobName
    , method = methodPost
    , port = pushGatewayPort
    , requestBody = RequestBodyIO (RequestBodyBS <$> exportMetricsAsText)
    }



-- | Try and send a 'postMetricsRequest' to a push gateway using a given 'Manager'.
--
-- This uses the basic "http-client" 'Manager' and the request generated by 'postMetricsRequest'.
-- If you need anything more complicated, use 'sendPushGatewayRequest'.
--
-- Throws:
-- * 'PushGatewayException' if the push gateway respons with a @4xx@ or @5xx@ status code.

postMetrics :: (MonadIO m) => Manager -> PushGateway -> Job -> m ()
postMetrics manager pushGateway job =
  sendPushGatewayRequest (liftIO . flip httpLbs manager) (postMetricsRequest pushGateway job)



-- | Create a @DELETE@ 'Request' to push the global repository metrics of this
-- process under the name of a specific 'Job' to a particular 'PushGateway'.
-- This deletes metrics with the given job from the push gateway.

deleteMetricsRequest :: PushGateway -> Job -> Request
deleteMetricsRequest PushGateway{ pushGatewayHost, pushGatewayPort } Job{ jobName } =
  defaultRequest
    { host = pushGatewayHost
    , path = C8.pack "/metrics/job/" <> T.encodeUtf8 jobName
    , method = methodDelete
    , port = pushGatewayPort
    }



-- | Try and send a 'deleteMetricsRequest' to a push gateway using a given 'Manager'.
--
-- This uses the basic "http-client" 'Manager' and the request generated by 'deleteMetricsRequest'.
-- If you need anything more complicated, use 'sendPushGatewayRequest'.
--
-- Throws:
-- * 'PushGatewayException' if the push gateway respons with a @4xx@ or @5xx@ status code.

deleteMetrics :: (MonadIO m) => Manager -> PushGateway -> Job -> m ()
deleteMetrics manager pushGateway job =
  sendPushGatewayRequest (liftIO . flip httpLbs manager) (deleteMetricsRequest pushGateway job)



-- | Send a HTTP request destined for a push gateway server and check for an error status.
--
-- Throws:
-- * 'PushGatewayException' if the push gateway respons with a @4xx@ or @5xx@ status code.

sendPushGatewayRequest :: (MonadIO m) => (Request -> m (Response LBS.ByteString)) -> Request -> m ()
sendPushGatewayRequest f req = do
  res <- f req
  let status = responseStatus res
  when (statusIsClientError status || statusIsServerError status)
       ( liftIO
           ( throwIO
               PushGatewayException
                 { pushGatewayStatus = status
                 , pushGatewayError = T.decodeUtf8 (LBS.toStrict (responseBody res))
                 } ) )
